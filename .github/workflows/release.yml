name: 'C++ CI'

on:
  push:
    branches:
      - workflows_release

jobs:
  build_linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Download  & Install Boost
        run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      - name: Set PATCH_VERSION
        run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - name: Running cmake 
        run: cmake --build .
      - name: Run tests  
        run: cmake --build . --target test
      - name: Create package
        run: cmake --build . --target package
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release Linux helloworld-0.0.${{ github.run_number }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package
  build_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download Boost
        shell: powershell
        run: |
          $uri = 'https://boostorg.jfrog.io/artifactory/main/release/1.81.0/source/boost_1_81_0.zip'
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Invoke-WebRequest -Uri $uri -OutFile C:\boost.zip -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome
      - name: Unzip boost
        run: Expand-Archive -LiteralPath 'C:\boost.zip' -DestinationPath C:\install\
      - name: Run bootstrap
        shell: powershell
        run: |
          cd C:\install\boost_1_81_0\tools\build\
          .\bootstrap.bat
      - name: Install Boost
        continue-on-error: true
        shell: powershell
        run: |
          cd C:\install\boost_1_81_0\tools\build\
          .\b2 --with-system --with-program_options --with-serialization --with-test --build-type=complete -j2 --prefix="C:\boost-build" address-model=64 install
          $env:Path += ";C:\boost-build\bin"
          cd C:\install\boost_1_81_0
          C:\boost-build\b2.exe --with-system --with-program_options --with-serialization --with-test --build-type=complete -j2 --build-dir="C:\install\boost_1_81_0\build" --build-type=complete --prefix="C:\boost" address-model=64 install
      - name: Check libs names
        if: success() || failure()
        run: |
          cd c:\boost\lib
          Get-ChildItem
      - name: Set PATCH_VERSION
        if: success() || failure()
        run: |
          $env:BOOST_INCLUDEDIR = 'C:\boost\include'
          $env:BOOST_LIBRARYDIR = 'C:\boost\lib'
          $env:BOOST_ROOT = 'C:\boost'
          mkdir build
          cd build
          cmake -DBOOST_ROOT=c:/boost -DPATCH_VERSION=${{ github.run_number }} ../
      - name: Running cmake
        if: success() || failure()
        shell: cmd
        run: |
          cd build
          cmake --build .
      - name: Run tests
        if: success() || failure()
        shell: cmd
        run: |
          cd build
          cmake --build . --target RUN_TESTS
      - name: Create package
        if: success() || failure()
        run: |
          cd build
          cmake --build . --target package
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release Windows helloworld-0.0.${{ github.run_number }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-win64.zip
          asset_name: helloworld-0.0.${{ github.run_number }}-win.zip
          asset_content_type: application/zip
